user  nginx nginx;
pid /data/nginx/nginx.pid;

worker_processes  4;
# 默认情况下，nginx的进程跑在某一个CPU或CPU的某一个核上，导致nginx进程使用硬件的资源不均，
#   本节的优化是不同的nginx进程给不同的CPU处理，充分有效的利用有效的硬件资源
# 四核cpu配置
# worker_cpu_affinity 0001 0010 0100 1000;

worker_rlimit_nofile 65535;

events {
    use epoll;
    worker_connections  1024;
}

error_log /data/nginx/logs/error.log warn;

http {
    include       mime.types;
    charset utf-8;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent $request_body "$http_referer" '
                      '"$http_user_agent" "$proxy_add_x_forwarded_for" "$request_time" '
                      '"$upstream_addr" "$upstream_response_time"';

    #隐藏版本号
    server_tokens off;
    keepalive_requests 100;
    keepalive_timeout  60;

    # gzip 模块设置开始
    gzip on;                    # 表示开启压缩功能
    gzip_min_length 1k;         # 表示允许压缩的页面最小字节数， 默认值: 0 ，不管页面多大都压缩
                                #   页面字节数从header头的Content-Length中获取。
                                #   建议设置成大于1k的字节数，小于1k可能会越压越大。 即: gzip_min_length 1024
    gzip_buffers 4 32k;         # 压缩缓存区大小 默认值: gzip_buffers 4 4k/8k
                                #   设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。
                                #   例如 4 4k 代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存。 
                                #   4 8k 代表以8k为单位，按照原始数据大小以8k为单位的4倍申请内存。
                                #   如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。
    gzip_http_version 1.1;      # 默认值: gzip_http_version 1.1(就是说对HTTP/1.1协议的请求才会进行gzip压缩)
                                #   识别http的协议版本。由于早期的一些浏览器或者http客户端，可能不支持gzip自解压，用户就会看到乱码，所以做一些判断还是有必要的。 
                                #    注：99.99%的浏览器基本上都支持gzip解压了，所以可以不用设这个值,保持系统默认即可。
                                #   假设我们使用的是默认值1.1，如果我们使用了proxy_pass进行反向代理，那么nginx和后端的upstream server之间是用HTTP/1.0协议通信的，如果我们使用nginx通过反向代理做Cache Server，而且前端的nginx没有开启gzip，同时，我们后端的nginx上没有设置gzip_http_version为1.0，那么Cache的url将不会进行gzip压缩
    gzip_comp_level 4;          # gzip压缩比/压缩级别，压缩级别 1-9，默认值：1(建议选择为4)
                                #   级别越高压缩率越大，当然压缩时间也就越长（传输快但比较消耗cpu）
    gzip_types text/plain text/javascript text/css text/xml application/xml application/javascript application/json;
                                # 指定压缩的类型
                                # 不推荐对图片进行压缩，本身已经压缩过
                                # 推荐压缩文本类型的数据
    gzip_vary on;               # vary header支持
    # gzip 模块设置结束

    # FastCGI 设置开始
    # FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。
    # FastCGI参数是配合nginx向后请求PHP动态引擎服务的相关参数。
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;
    # fastcgi_temp_path /data/ngx_fcgi_tmp;
    # fastcgi_cache_path /data/ngx_fcgi_cache levels=2:2 keys_zone=ngx_fcgi_cache:512m inactive=1d max_size=40g;
    # FastCGI 设置结束

    # sendfile参数用于开启文件的高效传输模式。
    # 同时将tcp_nopush和tcp_nodelay两个指令设置为on，可防止网络及磁盘i/o阻塞，提升nginx工作效率
    #放在http，server，location都可以
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    # 打开目录浏览功能
    autoindex off;
    # 默认为on，显示出文件的确切大小，单位是bytes。
    #   改为off后，显示出文件的大概大小，单位是kB或者MB或者GB
    autoindex_exact_size off;
    # 默认为off，显示的文件时间为GMT时间。
    #   改为on后，显示的文件时间为文件的服务器时间
    autoindex_localtime off;

    #服务器名字的hash表大小
    #server_names_hash_bucket_size 128;
    #上传文件大小限制
    #client_header_buffer_size 32k;
    large_client_header_buffers 4 64k;
    client_max_body_size 50m;


    #limit_zone crawler $binary_remote_addr 10m;

    #缓冲区代理缓冲用户端请求的最大字节数,可以理解为保存到本地再传给用户
    client_body_buffer_size 256k;
    client_header_buffer_size 16k;
    client_header_timeout 3m;
    client_body_timeout 3m;
    send_timeout 3m;
    proxy_connect_timeout 300s;

    proxy_read_timeout 300s;
    proxy_send_timeout 300s;
    proxy_buffer_size 64k;
    proxy_buffers 4 32k;
    proxy_busy_buffers_size 64k;
    proxy_temp_file_write_size 64k;
    proxy_ignore_client_abort on;

    #websocket 配置开始
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
    #websocket 配置结束

    include       conf/upstream.conf;
    
    # minghuaetc.com
    include       conf/minghuaetc.com/*;

    # sundot.cn
    include       conf/sundot.cn/*;

    # samsundot.com
    include       conf/samsundot.com/*;

    # edudot.cn
    include       conf/edudot.cn/*;


    server{
        server_name     10.10.10.127;
        listen          80;
        index           50x.html;
        error_page      404 500 502 503 504  /50x.html;
        charset utf8;
        #access_log      /data/nginx/logs/access.log;

        #错误页面
        location = /50x.html {
            internal;
            root html;
        }

        location /nginxstatus {
            stub_status on;
            access_log off;
            #auth_basic "nginxstatus";
            #auth_basic_user_file conf/htpasswd;
            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。
            #访问IP
            #allow 10.162.63.73;
            #deny all;
        }
    }
}